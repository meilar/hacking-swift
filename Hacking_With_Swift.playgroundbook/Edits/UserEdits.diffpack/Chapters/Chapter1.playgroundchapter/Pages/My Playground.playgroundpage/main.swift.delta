<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>func testFunction() {
    let hello = "Hello World"
    print(hello)
}

func isSuffixed(x: String, y: String) -&gt; Bool {
    return(x.hasSuffix(y))
}


func printTemp(temp: Int) {
    let fTemp = ((temp * 9) / 5) + 32
    print("The temperature is \(temp)ºC, \(fTemp)ºF")
}

func printPresidents() {
    var presidents = ["Bush", "Obama", "Trump", "Biden"]
    let reversedPresidents = presidents.reversed()
    print(reversedPresidents)

    presidents = ["Bush", "Clinton", "Bush", "Obama", "Trump", "Biden"]
    
    print("The number of presidents since George HW Bush is \(presidents.count)")
    
    let uPresidents = Set(presidents)
    
    print("The number of unique last names is \(uPresidents.count)")
}

func fizzBuzz(input: Int) {
    for i in 1 ... input {
        if (i % 5 == 0 &amp;&amp; i % 3 == 0){
            print("FizzBuzz")
            continue
        }
        else if i % 5 == 0 {
            print("Buzz")
            continue
        } else if i % 3 == 0 {
            print("Fizz")
            continue
        } else {
            print("\(i)")
        }
    }
}

func findRoot(_ input: Int) throws {
    enum InputError: Error {
        case bounds
    }
    if (input &lt; 1 || input &gt; 9999) {
        throw InputError.bounds
    }
    for i in 1 ... 99 {
        if i * i == input {
            print("Square root is \(i)")
                   return
        }
 
    }
    print("No square root found")
}

func makeArray(size: Int, using generator: () -&gt; Int) -&gt; [Int] {
    var numbers = [Int]()
    
    for _ in 0..&lt;size {
        let newNumber = generator()
        numbers.append(newNumber)
    }
    return numbers
}

let luckyNumbers = [7, 4, 38, 21, 16, 15, 12, 33, 31, 49]

func shoutLucky(_ input: [Int]) {
    var strings = input
        .filter { !$0.isMultiple(of: 2) }
        .sorted { $0 &lt; $1 }
        .map {  "\($0) is a lucky number" }
    for string in strings {
        print(string)
    }
}

struct Car {
    let model : String
    let seats : Int
    private(set) var gear = 1
    
    mutating func shiftUp() {
        if gear &lt; 11 {
            gear += 1
        }
        print("\(gear) gear")
    }
    
    mutating func shiftDown() {
        if gear &gt; 1 {
            gear -= 1
        }
        print("\(gear) gear")
    }
    static let example = Car(model: "Honda Accord", seats: 2)
}

class Animal {
    let legs: Int
    
    init(legs: Int) {
        self.legs = legs
    }
}

class Dog: Animal {
    func speak() {
        print("I'm a fucking dog")
    }
    init() {
        super.init(legs: 4)
    }
}

class Cat: Animal {
    let isTame: Bool
    func speak() {
        print("I'm a fucking cat")
    }
    init(isTame: Bool) {
        self.isTame = isTame
        super.init(legs: 4)
    }
}

class Corgi: Dog {
    override func speak() {
        print("I'm a fucking corgi")
    }
}

class Poodle: Dog {
    override func speak() {
        print("I'm a fucking poodle")
    }
}

class Persian: Cat {
    override func speak() {
        print("I'm a fucking persian")
    }
}

class Lion: Cat {
    override func speak() {
        print("I'm a fucking lion")
    }
    init() {
        super.init(isTame: false)
    }
}

protocol Building {
    var rooms: Int {get set}
    var cost: Int {get set}
    var agentName: String {get set}
    
    func summary() -&gt; Void
}

extension Building {
    func summary() {
        print("This listing costs $\(cost), has \(rooms) rooms, and is being sold by \(agentName)")
    }
}

struct House: Building {
    var rooms: Int
    var cost: Int
    var agentName: String
}

struct Office: Building {
    var rooms: Int
    var cost: Int
    var agentName: String
}

let xHouse = House(rooms: 6, cost: 100000, agentName: "Agatha Bargela")

let xOffice = Office(rooms: 12, cost: 6000000, agentName: "Hamical Barba")

func randomInt(input: [Int]?) -&gt; Int {
    return input?.randomElement() ?? Int.random(in: 1...100)
}



</string>
			<key>ModifiedRange</key>
			<string>{1, 3922}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
